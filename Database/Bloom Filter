Bloom Filter is  a space-efficient probabilistic data structure that tells whether an element may be present in a container
or definitely not. 

Lets say there's a string, and we want to figure out whether a given-string s is same or not. Now instead of comparing
each of the string entirely which would take O(n), we can precompute hash for each string, and compare just the hash of 
the given string in O(1).
If the hash is not equal we can say for sure the string is not equal, and if they are equal there's a probability that
these strings are maybe equal. 

Limitation: A hash function will give value in the range (0, range-1). So we will be able to correctly identify the match for
only range times, and other strings will meet with collision. To overcome this, we can have multiple hash-functions,
lets say k differnt hash functions. Now when any one of the k hash functions differ, we can say the strings are different,
and compare the string only when all hashes equals.

Bloom Filter is like an array of fixed size. Let's say we have bloom filter of size 10: it will initially appear like:
|0|0|0|0|0|0|0|0|0|0|

We have string s for which we want to create bloom filter. Let it pass through 3 different hash fn:
Let, h1(s) = 28 ; h2(s) = 109; h3(s) = 1 .
As the filter is of size 10, take hash mod 10, and update the corresponding index of filter to 1, i.e index 8,9 and 1, corr.

The bloom filter for s will now be like |0|1|0|0|0|0|0|0|1|1|

Now for checking if string s1 equals s, pass it through all the hash fn , and check if the corresponding index is 1.
If any single index is not set to 1, then the string definitely aren't equal.

Applications:
Can be used as a first layer of filtering. Facebook uses it to prevent one hit wonders.







