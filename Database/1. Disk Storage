Data Storage Access Patterns:
	a. Sequential
	b. Random
Sequential writes doesn't always mean sequential reads - but offers better locality of reference from caching perspective.
_________________________

B+ Trees and LSM Tree are the two basic data structures when we talk about building blocks of databases.

B+ Trees are used when we need less search and insertion time.
LSM Trees are used for write-intensive databases with less reads.
_________________________

LSM-Tree:  Log-Structured Merge Tree

LSM Trees is an immutable disk resident data structure, optimized for sequential writes while maintaining acceptable read performance.
LSM Trees are the underlying data structure for many highly scalable NOSQL distributed key value type databases like DynamoDB, Cassandra,etc.

LSM Trees helps storing massive amount of data, with very effecient write operations. LSM Trees consists of mainly two major components:
	a. Memtable : in memory
	b. SSTable : in disk
# Refer image for overall view : https://miro.medium.com/v2/resize:fit:1400/format:webp/0*JeaDeiI9ncQMrqGK.png

* Write Operation:

Overview: 
Upon write, the data is stored in memory first, which is lightning fast. As we can't store everything in memory, when a certain threshold 
is reached, a contiguous segment of data is flushed from the memory and merged to the disk. Here's another catch: The disk is arranged in
the form of layers with increasing level of compaction at each layer. The top one being fastest to access(because of smaller size of 
SSTables)but least compressed. When data piles up, its compressed and is stored in SSTable (Sorted String Table) in next layer.  

Notice a few details from above: the write is sequential in-memory, and the disk storage is sorted. 

Dive in:
Before the data is flushed to disk and organized into SSTables, it is also written to the Write-Ahead Log (WAL). So the data is written to 
the memory and is simultaneously written to WAL. This ensures data integrity - acts as a log of all the changes to help recover system
failures. Thus, Memtable also provides write-back cache. 
By writing to disk periodically and in larger batches, the number of times the disk has to spin up and down to access data is reduced, 
thus minimizing Disk I/O.

* Read Operation:

LSM tree first checks the memory to find data, as its super fast. It then searches through different SSTables at each layers.
The SSTables are sorted so the search takes O(logn) per SSTable. But since there are multiple SSTables it still needs to search through
all, increasing the read overhead. Here the Bloom Filter comes into play. In short, bloom filter is a probabilistic data structure, which 
gives insight of whether the data is definitely not present (with 100% surity), or maybe present. When the blloom filter signals that the 
LSM tree that the data is not present in a particular SSTable, that SSTable is completely skipped. Also, this bloom filter is updated 
with every batch write operation. 

* LSM Use Cases:
	a. NOSQL  Database - efficient write manages high data ingestion rates and can support the unstructured or semi structured data.
	b. TimeSeries Database - storing and sorting based on timestamp, enables better query. 
	c. Search Engine - speedy retrieval of indexed data, making search queries super fast.
	d. Log System - realtime event streaming, write is append-only and sequential writes is beneficial here, also WAL ensures integrity.

_________________________

